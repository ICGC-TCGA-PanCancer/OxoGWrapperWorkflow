
(
	(
		EXTRACTED_SNV_MOUNT=""
		EXTRACTED_SNV_FILES=""
		if (( $(zcat {{ sangerExtractedSNVVCFPath }} | grep "^[^#]" | wc -l) > 0 )) ; then
			echo "{{ sangerExtractedSNVVCFPath }} has SNVs."
			EXTRACTED_SNV_MOUNT=" ${EXTRACTED_SNV_MOUNT} -v  {{ sangerExtractedSNVVCFPath }}:/datafiles/VCF/{{ sangerWorfklow }}/{{ sangerExtractedSNVVCF }} "
			EXTRACTED_SNV_FILES=" ${EXTRACTED_SNV_FILES} /datafiles/VCF/{{ sangerWorfklow }}/{{ sangerExtractedSNVVCF }} "
		fi
		if (( $(zcat {{ broadExtractedSNVVCFPath }} | grep  "^[^#]" | wc -l) > 0 )) ; then
			echo "{{ broadExtractedSNVVCFPath }} has SNVs."
			EXTRACTED_SNV_MOUNT=" ${EXTRACTED_SNV_MOUNT} -v {{ broadExtractedSNVVCFPath }}:/datafiles/VCF/{{ broadWorkflow }}/{{ broadExtractedSNVVCF }} "
			EXTRACTED_SNV_FILES=" ${EXTRACTED_SNV_FILES} /datafiles/VCF/{{ broadWorkflow }}/{{ broadExtractedSNVVCF }} "
		fi
		if (( $(zcat {{ dkfzEmblExtractedSNVVCFPath }} | grep "^[^#]" | wc -l) > 0 )) ; then
			echo "{{ dkfzEmblExtractedSNVVCFPath }} has SNVs."
			EXTRACTED_SNV_MOUNT=" ${EXTRACTED_SNV_MOUNT} -v {{ dkfzEmblExtractedSNVVCFPath }}:/datafiles/VCF/{{ dkfzEmblWorkflow }}/{{ dkfzEmblExtractedSNVVCF }} "
			EXTRACTED_SNV_FILES=" ${EXTRACTED_SNV_FILES} /datafiles/VCF/{{ dkfzEmblWorkflow }}/{{ dkfzEmblExtractedSNVVCF }} "
		fi
		set -x
		docker run --rm --name="oxog_filter_with_tumour_{{ tumourID }}" \
				-v /refdata/:/cga/fh/pcawg_pipeline/refdata/ \
				-v /datastore/oxog_workspace/tumour_{{ tumourID }}/:/cga/fh/pcawg_pipeline/jobResults_pipette/jobs/{{ aliquotID }}/:rw \
				-v /datastore/bam/:/datafiles/BAM/ \
				-v /datastore/vcf/{{ broadWorkflow }}/{{ broadGnosID }}/:/datafiles/VCF/{{ broadWorkflow }}/ \
				-v /datastore/vcf/{{ sangerWorkflow }}/{{ sangerGnosID}}/:/datafiles/VCF/{{ sangerWorkflow }}/ \
				-v /datastore/vcf/{{ dkfzEmblWorkflow }}/{{ dkfzemblGnosID }}/:/datafiles/VCF/{{ dkfzEmblWorkflow }}/ \
				-v /datastore/vcf/{{ museWorkflow }}/{{ museGnosID }}/:/datafiles/VCF/{{ museWorkflow }}/ \
				${EXTRACTED_SNV_MOUNT} \
				-v /datastore/oxog_results/tumour_{{ tumourID }}/:/cga/fh/pcawg_pipeline/jobResults_pipette/results:rw \
			oxog:160329 /bin/bash -c "
				/cga/fh/pcawg_pipeline/pipelines/run_one_pipeline.bash pcawg /cga/fh/pcawg_pipeline/pipelines/oxog_pipeline.py \
						{{ aliquotID }} \
						/datafiles/BAM/tumour/{{ pathToTumour }} \
						/datafiles/BAM/normal/{{ normalBamGnosID }}/{{ normalBAMFileName }} \
 						{{ oxoQScore }} \
						/datafiles/VCF/{{ sangerWorkflow }}/{{ sangerSNVName }} \
						/datafiles/VCF/{{ dkfzEmblWorkflow }}/{{ dkfzEmblSNVName }} \
						/datafiles/VCF/{{ museWorkflow }}/{{ museSNVName }} \
						/datafiles/VCF/{{ broadWorkflow }}/{{ broadSNVName }} \
						${EXTRACTED_SNV_FILES}; "
		set +x
	) || echo "OxoG Exit Code: $?" 
)

(cd /datastore/oxog_results/tumour_{{ tumourID }}/ && sudo chmod a+rw -R /datastore/oxog_results/ && tar -xvkf ./{{ aliquotID }}.gnos_files.tar  )


( ([ -d {{ pathToUploadDir }} ] || mkdir -p {{ pathToUploadDir }}) \
	&& cp {{ pathToResults }}/*.vcf.gz  {{ pathToUploadDir }} \
	&& cp {{ pathToResults }}/*.vcf.gz.tbi   {{ pathToUploadDir }} \
	&& cp {{ broadNormalizedIndelVCFName }}  {{ pathToUploadDir }} \
	&& cp {{ dkfzEmblNormalizedIndelVCFName }}  {{ pathToUploadDir }} \
	&& cp {{ sangerNormalizedIndelVCFName }}  {{ pathToUploadDir }} \
	&& cp {{ broadNormalizedIndelVCFName }}.tbi  {{ pathToUploadDir }} \
	&& cp {{ dkfzEmblNormalizedIndelVCFName }}.tbi  {{ pathToUploadDir }} \
	&& cp {{ sangerNormalizedIndelVCFName }}.tbi  {{ pathToUploadDir }} \
	&& cp /datastore/oxog_workspace/tumour_{{ tumourID }}/mutect/sg/gather/{{ aliquotID }}.call_stats.txt  {{ pathToUploadDir }}/{{ aliquotID }}.call_stats_tumour_{{ tumourID }}.txt \
	&& cp /datastore/oxog_results/tumour_{{ tumourID }}/{{ aliquotID }}.gnos_files.tar {{ pathToUploadDir }}/{{ aliquotID }}.gnos_files_tumour_{{ tumourID }}.tar \
	&& cd {{ pathToUploadDir }} \
	&& gzip -f {{ aliquotID }}.call_stats_tumour_{{ tumourID }}.txt \
	&& tar -cvf ./{{ aliquotID }}.call_stats_tumour_{{ tumourID }}.txt.gz.tar ./{{ aliquotID }}.call_stats_tumour_{{ tumourID }}.txt.gz )  